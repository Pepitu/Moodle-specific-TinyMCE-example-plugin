
(function() {
    tinymce.create('tinymce.plugins.Example', {


        init : function(ed, url) {

            
            ed.addCommand('mceExample', function() {
               
            });

            // Register moodleemoticon button.
            ed.addButton('example', {
                title : 'example',
                cmd : 'mceExample',
                image : url + '/img/example.gif'
            });
        },

        /**
         * Creates control instances based in the incomming name. This method is normally not
         * needed since the addButton method of the tinymce.Editor class is a more easy way of adding buttons
         * but you sometimes need to create more complex controls like listboxes, split buttons etc then this
         * method can be used to create those.
         *
         * @param {String} n Name of the control to create.
         * @param {tinymce.ControlManager} cm Control manager to use inorder to create new control.
         * @return {tinymce.ui.Control} New control instance or null if no control was created.
         */
        createControl : function(n, cm) {
            return null;
        },

        /**
         * Returns information about the plugin as a name/value array.
         * The current keys are longname, author, authorurl, infourl and version.
         *
         * @return {Object} Name/value array containing information about the plugin.
         */
        getInfo : function() {
            return {
                longname : 'Colocations plugin',
                author : 'Pepe',
                authorurl : '',
                infourl : 'http://moodle.org',
                version : "1.0"
            };
        }
    });

    // Register plugin.
    tinymce.PluginManager.add('colocations', tinymce.plugins.Colocations);
})();
